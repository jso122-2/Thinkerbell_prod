import { useState } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { X, FileText, Download, Save, Sparkles, Check } from 'lucide-react';
import { createReport } from '../lib/api';
import { MarkdownPreview } from './MarkdownPreview';
import { STYLE_PROFILES } from '../mocks/data-transformer';
import type { Artifact } from '../lib/schemas';

interface WhitepaperBuilderProps {
  artifacts: Artifact[];
  isOpen: boolean;
  onClose: () => void;
  selectedArtifacts: string[];
  onSelectionChange: (selected: string[]) => void;
}

export function WhitepaperBuilder({ 
  artifacts, 
  isOpen, 
  onClose, 
  selectedArtifacts, 
  onSelectionChange 
}: WhitepaperBuilderProps) {
  const [title, setTitle] = useState('');
  const [abstract, setAbstract] = useState('');
  const [author, setAuthor] = useState('');
  const [activeTab, setActiveTab] = useState<'edit' | 'preview'>('edit');
  
  const queryClient = useQueryClient();

  const createReportMutation = useMutation({
    mutationFn: createReport,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['artifacts'] });
      onClose();
    }
  });

  if (!isOpen) return null;

  const selectedArtifactItems = artifacts.filter(a => selectedArtifacts.includes(a.id));

  const generateMarkdownPreview = () => {
    const artifactSections = selectedArtifactItems.map(artifact => {
      const profile = STYLE_PROFILES.ARTIFACT_TYPES[artifact.type];
      return `
## ${profile?.emoji} ${artifact.name}

**Type:** ${artifact.type}  
**Created:** ${new Date(artifact.createdAt).toLocaleDateString()}  
**Status:** ${artifact.status}  
${artifact.size ? `**Size:** ${(artifact.size / (1024 * 1024)).toFixed(1)}MB` : ''}

${profile?.description}

---
`;
    }).join('\n');

    return `# ${title || 'Untitled Whitepaper'}

${author ? `**Author:** ${author}  ` : ''}
**Generated:** ${new Date().toLocaleDateString()}  
**Artifacts:** ${selectedArtifactItems.length}

## Abstract

${abstract || 'No abstract provided.'}

---

# Included Artifacts

${artifactSections}

## Summary

This whitepaper was automatically generated from ${selectedArtifactItems.length} artifact${selectedArtifactItems.length !== 1 ? 's' : ''} using the Thinkerbell pipeline system.

### Artifact Breakdown

${Object.entries(
  selectedArtifactItems.reduce((acc, artifact) => {
    acc[artifact.type] = (acc[artifact.type] || 0) + 1;
    return acc;
  }, {} as Record<string, number>)
).map(([type, count]) => `- **${type}**: ${count}`).join('\n')}

---

*Generated by Thinkerbell ⚡ - AI Pipeline Command Center*
`;
  };

  const handleSave = () => {
    createReportMutation.mutate({
      sources: selectedArtifacts,
      title: title || 'Untitled Whitepaper',
      abstract,
      author
    });
  };

  return (
    <>
      {/* Backdrop */}
      <div 
        className="fixed inset-0 bg-black bg-opacity-50 z-50"
        onClick={onClose}
      />
      
      {/* Modal */}
      <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-2xl shadow-2xl max-w-6xl w-full max-h-[90vh] flex flex-col">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-gray-200">
            <div className="flex items-center space-x-3">
              <FileText className="w-6 h-6 text-pink-600" />
              <h2 className="text-2xl font-black text-black">
                Whitepaper Builder
              </h2>
            </div>
            <button
              onClick={onClose}
              className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Content */}
          <div className="flex flex-1 overflow-hidden">
            {/* Left Panel - Artifact Selection & Metadata */}
            <div className="w-1/3 border-r border-gray-200 p-6 overflow-y-auto">
              <h3 className="text-lg font-bold text-black mb-4">Metadata</h3>
              
              {/* Form */}
              <div className="space-y-4 mb-6">
                <div>
                  <label className="block text-sm font-bold text-gray-700 mb-2">
                    Title
                  </label>
                  <input
                    type="text"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    placeholder="Enter whitepaper title..."
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-bold text-gray-700 mb-2">
                    Author
                  </label>
                  <input
                    type="text"
                    value={author}
                    onChange={(e) => setAuthor(e.target.value)}
                    placeholder="Enter author name..."
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-bold text-gray-700 mb-2">
                    Abstract
                  </label>
                  <textarea
                    value={abstract}
                    onChange={(e) => setAbstract(e.target.value)}
                    placeholder="Enter abstract..."
                    rows={4}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent resize-none"
                  />
                </div>
              </div>

              {/* Artifact Selection */}
              <h3 className="text-lg font-bold text-black mb-4">
                Select Artifacts ({selectedArtifacts.length})
              </h3>
              
              <div className="space-y-2 max-h-64 overflow-y-auto">
                {artifacts.map((artifact) => {
                  const profile = STYLE_PROFILES.ARTIFACT_TYPES[artifact.type];
                  const isSelected = selectedArtifacts.includes(artifact.id);
                  
                  return (
                    <div
                      key={artifact.id}
                      onClick={() => {
                        if (isSelected) {
                          onSelectionChange(selectedArtifacts.filter(id => id !== artifact.id));
                        } else {
                          onSelectionChange([...selectedArtifacts, artifact.id]);
                        }
                      }}
                      className={`p-3 rounded-lg border cursor-pointer transition-all ${
                        isSelected
                          ? 'border-pink-500 bg-pink-50'
                          : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                      }`}
                    >
                      <div className="flex items-center space-x-3">
                        <div className="flex-shrink-0">
                          {isSelected ? (
                            <div className="w-5 h-5 bg-pink-500 rounded flex items-center justify-center">
                              <Check className="w-3 h-3 text-white" />
                            </div>
                          ) : (
                            <div className="w-5 h-5 border-2 border-gray-300 rounded" />
                          )}
                        </div>
                        <span className="text-lg">{profile?.emoji}</span>
                        <div className="flex-1 min-w-0">
                          <div className="font-medium text-sm text-gray-900 truncate">
                            {artifact.name}
                          </div>
                          <div className="text-xs text-gray-500">
                            {artifact.type} • {new Date(artifact.createdAt).toLocaleDateString()}
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>

            {/* Right Panel - Preview */}
            <div className="flex-1 flex flex-col">
              {/* Tab Header */}
              <div className="flex border-b border-gray-200">
                <button
                  onClick={() => setActiveTab('edit')}
                  className={`px-6 py-3 text-sm font-bold border-b-2 transition-colors ${
                    activeTab === 'edit'
                      ? 'border-pink-500 text-pink-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700'
                  }`}
                >
                  Edit
                </button>
                <button
                  onClick={() => setActiveTab('preview')}
                  className={`px-6 py-3 text-sm font-bold border-b-2 transition-colors ${
                    activeTab === 'preview'
                      ? 'border-pink-500 text-pink-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700'
                  }`}
                >
                  Preview
                </button>
              </div>

              {/* Tab Content */}
              <div className="flex-1 overflow-hidden">
                {activeTab === 'edit' ? (
                  <div className="h-full p-6">
                    <textarea
                      value={generateMarkdownPreview()}
                      readOnly
                      className="w-full h-full p-4 border border-gray-300 rounded-lg font-mono text-sm resize-none focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                      placeholder="Select artifacts and fill metadata to generate content..."
                    />
                  </div>
                ) : (
                  <div className="h-full overflow-y-auto">
                    <MarkdownPreview content={generateMarkdownPreview()} />
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="flex items-center justify-between p-6 border-t border-gray-200 bg-gray-50">
            <div className="text-sm text-gray-600">
              {selectedArtifacts.length} artifact{selectedArtifacts.length !== 1 ? 's' : ''} selected
            </div>
            
            <div className="flex items-center space-x-3">
              <button
                onClick={onClose}
                className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              
              <button
                onClick={handleSave}
                disabled={selectedArtifacts.length === 0 || createReportMutation.isPending}
                className="flex items-center space-x-2 px-6 py-2 bg-pink-600 text-white rounded-lg hover:bg-pink-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {createReportMutation.isPending ? (
                  <>
                    <Sparkles className="w-4 h-4 animate-spin" />
                    <span>Creating...</span>
                  </>
                ) : (
                  <>
                    <Save className="w-4 h-4" />
                    <span>Create Whitepaper</span>
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}