#!/bin/bash

# Thinkerbell Ubuntu Sync Runner
# Automatically syncs files from Windows environment to Ubuntu environment

set -e

# Configuration
SOURCE_DIR="/mnt/c/Users/Admin/OneDrive/Desktop/scripts/Thinkerbell/Thinkerbell_template_pipeline"
TARGET_DIR="/root/scripts/Thinkerbell/Thinkerbell_template_pipeline"
SYNC_RUNNER="file_sync_runner.py"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

# Function to check if source directory exists
check_source() {
    if [ ! -d "$SOURCE_DIR" ]; then
        print_error "Source directory not found: $SOURCE_DIR"
        print_warning "Make sure Windows filesystem is mounted at /mnt/c/"
        return 1
    fi
    return 0
}

# Function to create target directory
create_target() {
    print_status "Creating target directory: $TARGET_DIR"
    mkdir -p "$TARGET_DIR"
}

# Function to copy files
copy_files() {
    print_status "Copying files from Windows to Ubuntu..."
    
    # Copy Python files
    find "$SOURCE_DIR" -name "*.py" -exec cp {} "$TARGET_DIR/" \;
    
    # Copy shell scripts
    find "$SOURCE_DIR" -name "*.sh" -exec cp {} "$TARGET_DIR/" \;
    
    # Copy JSON files
    find "$SOURCE_DIR" -name "*.json" -exec cp {} "$TARGET_DIR/" \;
    
    # Copy markdown files
    find "$SOURCE_DIR" -name "*.md" -exec cp {} "$TARGET_DIR/" \;
    
    # Copy text files
    find "$SOURCE_DIR" -name "*.txt" -exec cp {} "$TARGET_DIR/" \;
    
    # Copy requirements files
    find "$SOURCE_DIR" -name "requirements*.txt" -exec cp {} "$TARGET_DIR/" \;
    
    print_status "Files copied successfully!"
}

# Function to copy directory structure
copy_directories() {
    print_status "Copying directory structure..."
    
    # Copy thinkerbell directory if it exists
    if [ -d "$SOURCE_DIR/thinkerbell" ]; then
        cp -r "$SOURCE_DIR/thinkerbell" "$TARGET_DIR/"
        print_status "Copied thinkerbell directory"
    fi
    
    # Copy other important directories
    for dir in "data" "templates" "examples" "webapp" "api" "src"; do
        if [ -d "$SOURCE_DIR/$dir" ]; then
            cp -r "$SOURCE_DIR/$dir" "$TARGET_DIR/"
            print_status "Copied $dir directory"
        fi
    done
}

# Function to make scripts executable
make_executable() {
    print_status "Making scripts executable..."
    
    # Make shell scripts executable
    find "$TARGET_DIR" -name "*.sh" -exec chmod +x {} \;
    
    # Make Python scripts executable
    find "$TARGET_DIR" -name "*.py" -exec chmod +x {} \;
    
    print_status "Scripts made executable!"
}

# Function to install dependencies
install_dependencies() {
    print_status "Installing Python dependencies..."
    
    # Check if pip3 is available
    if ! command -v pip3 &> /dev/null; then
        print_error "pip3 not found. Installing..."
        sudo apt update
        sudo apt install -y python3-pip
    fi
    
    # Install required packages
    pip3 install numpy pandas scikit-learn nltk textstat regex sentence-transformers transformers torch pydantic jsonschema pathlib2 tqdm
    
    print_status "Dependencies installed successfully!"
}

# Function to create launcher script
create_launcher() {
    print_status "Creating Ubuntu launcher script..."
    
    cat > "$TARGET_DIR/thinkerbell_launcher.sh" << 'EOF'
#!/bin/bash

# Thinkerbell Ubuntu Launcher
# Auto-generated by ubuntu_sync_runner.sh

SCRIPT_DIR="/root/scripts/Thinkerbell/Thinkerbell_template_pipeline"
PYTHON_CMD="python3"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

# Function to check if we're in the right directory
check_environment() {
    if [ ! -d "$SCRIPT_DIR" ]; then
        print_error "Thinkerbell directory not found at $SCRIPT_DIR"
        print_status "Creating directory structure..."
        mkdir -p "$SCRIPT_DIR"
    fi
    
    cd "$SCRIPT_DIR" 2>/dev/null || {
        print_error "Cannot access $SCRIPT_DIR"
        exit 1
    }
}

# Function to show status
show_status() {
    print_header "Thinkerbell System Status"
    
    check_environment
    
    print_status "Checking Python environment..."
    python3 --version
    
    print_status "Checking available tools..."
    ls -la *.py 2>/dev/null || print_warning "No Python tools found"
    
    print_status "Running system status check..."
    $PYTHON_CMD synthetic_data_launcher.py --status
}

# Function to test components
test_components() {
    print_header "Testing Components"
    
    check_environment
    
    print_status "Running component tests..."
    $PYTHON_CMD synthetic_data_launcher.py --test
}

# Function to generate validation batch
generate_validation() {
    local size=${1:-50}
    
    print_header "Generating Validation Batch"
    
    check_environment
    
    print_status "Generating validation batch of $size samples..."
    $PYTHON_CMD synthetic_data_launcher.py --validation-batch $size
}

# Function to generate full dataset
generate_dataset() {
    local mode=${1:-individual}
    local samples=${2:-1000}
    local batch_size=${3:-100}
    
    print_header "Generating Dataset"
    
    check_environment
    
    print_status "Generating $samples samples in $mode mode..."
    $PYTHON_CMD synthetic_data_launcher.py --mode $mode --samples $samples --batch-size $batch_size
}

# Function to run quality analysis
quality_analysis() {
    local dataset_path=${1:-synthetic_dataset}
    
    print_header "Quality Analysis"
    
    check_environment
    
    print_status "Running quality analysis on $dataset_path..."
    $PYTHON_CMD synthetic_data_launcher.py --quality-analysis $dataset_path
}

# Function to sync files
sync_files() {
    print_header "Syncing Files from Windows Environment"
    
    check_environment
    
    print_status "Running file sync..."
    cd "$SCRIPT_DIR"
    bash ubuntu_sync_runner.sh
    
    print_status "Files synced successfully!"
}

# Function to show help
show_help() {
    print_header "Thinkerbell Tools - Help"
    
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  status                    - Show system status"
    echo "  test                      - Test all components"
    echo "  validation [SIZE]         - Generate validation batch (default: 50)"
    echo "  generate [MODE] [SAMPLES] - Generate full dataset"
    echo "  quality [PATH]            - Run quality analysis"
    echo "  sync                      - Sync files from Windows"
    echo "  help                      - Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 status"
    echo "  $0 test"
    echo "  $0 validation 100"
    echo "  $0 generate individual 1000"
    echo "  $0 generate monolithic 500"
    echo "  $0 quality synthetic_dataset/"
    echo "  $0 sync"
    echo ""
    echo "Modes: individual, monolithic"
    echo "Default samples: 1000"
    echo "Default validation size: 50"
}

# Main script logic
main() {
    local command=${1:-help}
    
    case $command in
        "status")
            show_status
            ;;
        "test")
            test_components
            ;;
        "validation")
            generate_validation $2
            ;;
        "generate")
            generate_dataset $2 $3 $4
            ;;
        "quality")
            quality_analysis $2
            ;;
        "sync")
            sync_files
            ;;
        "help"|*)
            show_help
            ;;
    esac
}

# Check if script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # Script is being executed
    main "$@"
else
    # Script is being sourced
    print_status "Thinkerbell tools loaded. Use 'main' function to run commands."
fi

# Export functions for use in shell
export -f main show_status test_components generate_validation generate_dataset quality_analysis show_help sync_files
EOF

    chmod +x "$TARGET_DIR/thinkerbell_launcher.sh"
    print_status "Launcher script created: $TARGET_DIR/thinkerbell_launcher.sh"
}

# Function to create aliases
create_aliases() {
    print_status "Creating bash aliases..."
    
    if ! grep -q "thinkerbell" ~/.bashrc; then
        echo "" >> ~/.bashrc
        echo "# Thinkerbell Tools Aliases" >> ~/.bashrc
        echo "alias thinkerbell='source $TARGET_DIR/thinkerbell_launcher.sh'" >> ~/.bashrc
        echo "alias tb='source $TARGET_DIR/thinkerbell_launcher.sh'" >> ~/.bashrc
        print_status "Added aliases to .bashrc"
    else
        print_status "Aliases already exist in .bashrc"
    fi
}

# Function to run sync
run_sync() {
    print_header "Thinkerbell Ubuntu Sync Runner"
    
    # Check source directory
    if ! check_source; then
        exit 1
    fi
    
    # Create target directory
    create_target
    
    # Copy files
    copy_files
    
    # Copy directories
    copy_directories
    
    # Make scripts executable
    make_executable
    
    # Install dependencies
    install_dependencies
    
    # Create launcher
    create_launcher
    
    # Create aliases
    create_aliases
    
    print_header "Sync Complete!"
    
    echo "🎉 Thinkerbell files have been synced successfully!"
    echo ""
    echo "📁 Files are located at: $TARGET_DIR"
    echo "🛠️  Launcher: $TARGET_DIR/thinkerbell_launcher.sh"
    echo ""
    echo "🚀 Usage:"
    echo "  source $TARGET_DIR/thinkerbell_launcher.sh"
    echo "  main status"
    echo "  main test"
    echo "  main validation 50"
    echo "  main generate individual 1000"
    echo ""
    echo "📋 Or use the alias:"
    echo "  thinkerbell status"
    echo "  tb test"
    echo ""
    echo "⚠️  Note: You may need to restart your terminal or run 'source ~/.bashrc' to use the aliases."
}

# Main function
main() {
    local command=${1:-sync}
    
    case $command in
        "sync")
            run_sync
            ;;
        "help"|*)
            echo "Usage: $0 [sync|help]"
            echo ""
            echo "Commands:"
            echo "  sync    - Sync files from Windows to Ubuntu"
            echo "  help    - Show this help message"
            ;;
    esac
}

# Run main function
main "$@" 